{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.38.33.27573",
      "templateHash": "2267082095679341523"
    }
  },
  "parameters": {
    "environment": {
      "type": "string",
      "defaultValue": "dev",
      "metadata": {
        "description": "Environment name (dev, staging, prod)"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Azure region for resources"
      }
    },
    "postgresAdminUsername": {
      "type": "securestring",
      "metadata": {
        "description": "PostgreSQL administrator username"
      }
    },
    "postgresAdminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "PostgreSQL administrator password"
      }
    },
    "jwtSecretKey": {
      "type": "securestring",
      "metadata": {
        "description": "JWT secret key for authentication"
      }
    },
    "openWeatherMapApiKey": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "Weather API - OpenWeatherMap API Key"
      }
    },
    "mapTilerApiKey": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "MapTiler API Key"
      }
    },
    "corsAllowedOrigins": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Allowed CORS origins for API"
      }
    },
    "tags": {
      "type": "object",
      "defaultValue": {
        "Environment": "[parameters('environment')]",
        "Application": "SunnySeat",
        "ManagedBy": "Bicep"
      },
      "metadata": {
        "description": "Tags to apply to all resources"
      }
    }
  },
  "variables": {
    "uniqueSuffix": "[uniqueString(resourceGroup().id)]",
    "namingPrefix": "[format('sunnyseat-{0}', parameters('environment'))]"
  },
  "resources": [
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2025-04-01",
      "name": "[format('{0}-vnet-deployment', variables('namingPrefix'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "environment": {
            "value": "[parameters('environment')]"
          },
          "vnetName": {
            "value": "[format('{0}-vnet', variables('namingPrefix'))]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.38.33.27573",
              "templateHash": "1650273616705893349"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "metadata": {
                "description": "Azure region"
              }
            },
            "environment": {
              "type": "string",
              "metadata": {
                "description": "Environment name"
              }
            },
            "vnetName": {
              "type": "string",
              "metadata": {
                "description": "Virtual Network name"
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Resource tags"
              }
            }
          },
          "variables": {
            "addressPrefix": "10.0.0.0/16",
            "containerAppsSubnetPrefix": "10.0.0.0/23",
            "databaseSubnetPrefix": "10.0.2.0/24",
            "redisSubnetPrefix": "10.0.3.0/24"
          },
          "resources": [
            {
              "type": "Microsoft.Network/virtualNetworks",
              "apiVersion": "2023-05-01",
              "name": "[parameters('vnetName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "addressSpace": {
                  "addressPrefixes": [
                    "[variables('addressPrefix')]"
                  ]
                },
                "subnets": [
                  {
                    "name": "container-apps-subnet",
                    "properties": {
                      "addressPrefix": "[variables('containerAppsSubnetPrefix')]",
                      "delegations": [],
                      "serviceEndpoints": [
                        {
                          "service": "Microsoft.KeyVault"
                        },
                        {
                          "service": "Microsoft.Storage"
                        }
                      ]
                    }
                  },
                  {
                    "name": "database-subnet",
                    "properties": {
                      "addressPrefix": "[variables('databaseSubnetPrefix')]",
                      "delegations": [
                        {
                          "name": "Microsoft.DBforPostgreSQL/flexibleServers",
                          "properties": {
                            "serviceName": "Microsoft.DBforPostgreSQL/flexibleServers"
                          }
                        }
                      ],
                      "serviceEndpoints": []
                    }
                  },
                  {
                    "name": "redis-subnet",
                    "properties": {
                      "addressPrefix": "[variables('redisSubnetPrefix')]",
                      "delegations": [],
                      "serviceEndpoints": []
                    }
                  }
                ]
              }
            }
          ],
          "outputs": {
            "vnetId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName'))]"
            },
            "vnetName": {
              "type": "string",
              "value": "[parameters('vnetName')]"
            },
            "containerAppsSubnetId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName')), '2023-05-01').subnets[0].id]"
            },
            "databaseSubnetId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName')), '2023-05-01').subnets[1].id]"
            },
            "redisSubnetId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName')), '2023-05-01').subnets[2].id]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2025-04-01",
      "name": "[format('{0}-db-deployment', variables('namingPrefix'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "environment": {
            "value": "[parameters('environment')]"
          },
          "serverName": {
            "value": "[format('{0}-psql-{1}', variables('namingPrefix'), variables('uniqueSuffix'))]"
          },
          "administratorLogin": {
            "value": "[parameters('postgresAdminUsername')]"
          },
          "administratorPassword": {
            "value": "[parameters('postgresAdminPassword')]"
          },
          "databaseName": {
            "value": "[format('sunnyseat_{0}', parameters('environment'))]"
          },
          "enablePostGIS": {
            "value": true
          },
          "skuName": "[if(equals(parameters('environment'), 'prod'), createObject('value', 'Standard_D4s_v3'), createObject('value', 'Standard_B1ms'))]",
          "highAvailability": {
            "value": "[equals(parameters('environment'), 'prod')]"
          },
          "subnetId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-vnet-deployment', variables('namingPrefix'))), '2025-04-01').outputs.databaseSubnetId.value]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.38.33.27573",
              "templateHash": "4886328201036631609"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "metadata": {
                "description": "Azure region"
              }
            },
            "environment": {
              "type": "string",
              "metadata": {
                "description": "Environment name"
              }
            },
            "serverName": {
              "type": "string",
              "metadata": {
                "description": "PostgreSQL server name"
              }
            },
            "databaseName": {
              "type": "string",
              "metadata": {
                "description": "Database name"
              }
            },
            "administratorLogin": {
              "type": "securestring",
              "metadata": {
                "description": "PostgreSQL admin username"
              }
            },
            "administratorPassword": {
              "type": "securestring",
              "metadata": {
                "description": "PostgreSQL admin password"
              }
            },
            "enablePostGIS": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Enable PostGIS extension"
              }
            },
            "skuName": {
              "type": "string",
              "defaultValue": "Standard_B1ms",
              "metadata": {
                "description": "SKU name"
              }
            },
            "highAvailability": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Enable high availability"
              }
            },
            "subnetId": {
              "type": "string",
              "metadata": {
                "description": "Subnet ID for private networking"
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Resource tags"
              }
            }
          },
          "variables": {
            "tier": "[if(startsWith(parameters('skuName'), 'Burstable'), 'Burstable', if(startsWith(parameters('skuName'), 'Standard'), 'GeneralPurpose', 'MemoryOptimized'))]"
          },
          "resources": [
            {
              "type": "Microsoft.DBforPostgreSQL/flexibleServers",
              "apiVersion": "2023-03-01-preview",
              "name": "[parameters('serverName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": {
                "name": "[parameters('skuName')]",
                "tier": "[variables('tier')]"
              },
              "properties": {
                "administratorLogin": "[parameters('administratorLogin')]",
                "administratorLoginPassword": "[parameters('administratorPassword')]",
                "version": "15",
                "storage": {
                  "storageSizeGB": "[if(equals(parameters('environment'), 'prod'), 128, 32)]",
                  "autoGrow": "Enabled"
                },
                "backup": {
                  "backupRetentionDays": "[if(equals(parameters('environment'), 'prod'), 30, 7)]",
                  "geoRedundantBackup": "[if(equals(parameters('environment'), 'prod'), 'Enabled', 'Disabled')]"
                },
                "highAvailability": "[if(parameters('highAvailability'), createObject('mode', 'ZoneRedundant', 'standbyAvailabilityZone', ''), createObject('mode', 'Disabled'))]",
                "network": {
                  "delegatedSubnetResourceId": "[parameters('subnetId')]",
                  "privateDnsZoneArmResourceId": "[resourceId('Microsoft.Network/privateDnsZones', format('{0}.private.postgres.database.azure.com', parameters('serverName')))]"
                },
                "authConfig": {
                  "activeDirectoryAuth": "Disabled",
                  "passwordAuth": "Enabled"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', format('{0}.private.postgres.database.azure.com', parameters('serverName')))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateDnsZones",
              "apiVersion": "2020-06-01",
              "name": "[format('{0}.private.postgres.database.azure.com', parameters('serverName'))]",
              "location": "global",
              "tags": "[parameters('tags')]"
            },
            {
              "type": "Microsoft.DBforPostgreSQL/flexibleServers/databases",
              "apiVersion": "2023-03-01-preview",
              "name": "[format('{0}/{1}', parameters('serverName'), parameters('databaseName'))]",
              "properties": {
                "charset": "UTF8",
                "collation": "en_US.utf8"
              },
              "dependsOn": [
                "[resourceId('Microsoft.DBforPostgreSQL/flexibleServers', parameters('serverName'))]"
              ]
            },
            {
              "condition": "[parameters('enablePostGIS')]",
              "type": "Microsoft.DBforPostgreSQL/flexibleServers/configurations",
              "apiVersion": "2023-03-01-preview",
              "name": "[format('{0}/{1}', parameters('serverName'), 'azure.extensions')]",
              "properties": {
                "value": "POSTGIS,POSTGIS_TOPOLOGY,POSTGIS_RASTER,UUID-OSSP",
                "source": "user-override"
              },
              "dependsOn": [
                "[resourceId('Microsoft.DBforPostgreSQL/flexibleServers', parameters('serverName'))]"
              ]
            },
            {
              "type": "Microsoft.DBforPostgreSQL/flexibleServers/firewallRules",
              "apiVersion": "2023-03-01-preview",
              "name": "[format('{0}/{1}', parameters('serverName'), 'AllowAzureServices')]",
              "properties": {
                "startIpAddress": "0.0.0.0",
                "endIpAddress": "0.0.0.0"
              },
              "dependsOn": [
                "[resourceId('Microsoft.DBforPostgreSQL/flexibleServers', parameters('serverName'))]"
              ]
            }
          ],
          "outputs": {
            "serverId": {
              "type": "string",
              "value": "[resourceId('Microsoft.DBforPostgreSQL/flexibleServers', parameters('serverName'))]"
            },
            "fullyQualifiedDomainName": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.DBforPostgreSQL/flexibleServers', parameters('serverName')), '2023-03-01-preview').fullyQualifiedDomainName]"
            },
            "databaseName": {
              "type": "string",
              "value": "[parameters('databaseName')]"
            },
            "serverName": {
              "type": "string",
              "value": "[parameters('serverName')]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('{0}-vnet-deployment', variables('namingPrefix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2025-04-01",
      "name": "[format('{0}-redis-deployment', variables('namingPrefix'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "environment": {
            "value": "[parameters('environment')]"
          },
          "redisName": {
            "value": "[format('{0}-redis-{1}', variables('namingPrefix'), variables('uniqueSuffix'))]"
          },
          "skuName": "[if(equals(parameters('environment'), 'prod'), createObject('value', 'Standard'), createObject('value', 'Basic'))]",
          "skuFamily": "[if(equals(parameters('environment'), 'prod'), createObject('value', 'C'), createObject('value', 'C'))]",
          "skuCapacity": "[if(equals(parameters('environment'), 'prod'), createObject('value', 1), createObject('value', 0))]",
          "subnetId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-vnet-deployment', variables('namingPrefix'))), '2025-04-01').outputs.redisSubnetId.value]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.38.33.27573",
              "templateHash": "16927465804413233396"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "metadata": {
                "description": "Azure region"
              }
            },
            "environment": {
              "type": "string",
              "metadata": {
                "description": "Environment name"
              }
            },
            "redisName": {
              "type": "string",
              "metadata": {
                "description": "Redis cache name"
              }
            },
            "skuName": {
              "type": "string",
              "defaultValue": "Basic",
              "metadata": {
                "description": "SKU name (Basic, Standard, Premium)"
              }
            },
            "skuFamily": {
              "type": "string",
              "defaultValue": "C",
              "metadata": {
                "description": "SKU family (C for Basic/Standard, P for Premium)"
              }
            },
            "skuCapacity": {
              "type": "int",
              "defaultValue": 0,
              "metadata": {
                "description": "SKU capacity (0-6 depending on family)"
              }
            },
            "subnetId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Subnet ID for private networking (Premium only)"
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Resource tags"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Cache/redis",
              "apiVersion": "2023-08-01",
              "name": "[parameters('redisName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "sku": {
                  "name": "[parameters('skuName')]",
                  "family": "[parameters('skuFamily')]",
                  "capacity": "[parameters('skuCapacity')]"
                },
                "enableNonSslPort": false,
                "minimumTlsVersion": "1.2",
                "publicNetworkAccess": "Enabled",
                "redisConfiguration": {
                  "maxmemory-policy": "allkeys-lru"
                },
                "redisVersion": "6"
              }
            }
          ],
          "outputs": {
            "redisId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Cache/redis', parameters('redisName'))]"
            },
            "hostName": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Cache/redis', parameters('redisName')), '2023-08-01').hostName]"
            },
            "sslPort": {
              "type": "int",
              "value": "[reference(resourceId('Microsoft.Cache/redis', parameters('redisName')), '2023-08-01').sslPort]"
            },
            "primaryKey": {
              "type": "string",
              "value": "[listKeys(resourceId('Microsoft.Cache/redis', parameters('redisName')), '2023-08-01').primaryKey]"
            },
            "connectionString": {
              "type": "string",
              "value": "[format('{0}:{1},password={2},ssl=True,abortConnect=False', reference(resourceId('Microsoft.Cache/redis', parameters('redisName')), '2023-08-01').hostName, reference(resourceId('Microsoft.Cache/redis', parameters('redisName')), '2023-08-01').sslPort, listKeys(resourceId('Microsoft.Cache/redis', parameters('redisName')), '2023-08-01').primaryKey)]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('{0}-vnet-deployment', variables('namingPrefix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2025-04-01",
      "name": "[format('{0}-kv-deployment', variables('namingPrefix'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "environment": {
            "value": "[parameters('environment')]"
          },
          "keyVaultName": {
            "value": "[format('ss-kv-{0}', variables('uniqueSuffix'))]"
          },
          "enabledForDeployment": {
            "value": true
          },
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.38.33.27573",
              "templateHash": "10389929465948696162"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "metadata": {
                "description": "Azure region"
              }
            },
            "environment": {
              "type": "string",
              "metadata": {
                "description": "Environment name"
              }
            },
            "keyVaultName": {
              "type": "string",
              "metadata": {
                "description": "Key Vault name"
              }
            },
            "enabledForDeployment": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Enable for deployment"
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Resource tags"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.KeyVault/vaults",
              "apiVersion": "2023-07-01",
              "name": "[parameters('keyVaultName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "sku": {
                  "family": "A",
                  "name": "standard"
                },
                "tenantId": "[subscription().tenantId]",
                "enabledForDeployment": "[parameters('enabledForDeployment')]",
                "enabledForDiskEncryption": false,
                "enabledForTemplateDeployment": true,
                "enableSoftDelete": "[equals(parameters('environment'), 'prod')]",
                "softDeleteRetentionInDays": "[if(equals(parameters('environment'), 'prod'), 90, 7)]",
                "enableRbacAuthorization": true,
                "publicNetworkAccess": "Enabled",
                "networkAcls": {
                  "bypass": "AzureServices",
                  "defaultAction": "Allow"
                }
              }
            }
          ],
          "outputs": {
            "keyVaultId": {
              "type": "string",
              "value": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
            },
            "keyVaultName": {
              "type": "string",
              "value": "[parameters('keyVaultName')]"
            },
            "vaultUri": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName')), '2023-07-01').vaultUri]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2025-04-01",
      "name": "[format('{0}-monitoring-deployment', variables('namingPrefix'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "environment": {
            "value": "[parameters('environment')]"
          },
          "logAnalyticsName": {
            "value": "[format('{0}-logs', variables('namingPrefix'))]"
          },
          "appInsightsName": {
            "value": "[format('{0}-insights', variables('namingPrefix'))]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.38.33.27573",
              "templateHash": "1329169618275736437"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "metadata": {
                "description": "Azure region"
              }
            },
            "environment": {
              "type": "string",
              "metadata": {
                "description": "Environment name"
              }
            },
            "logAnalyticsName": {
              "type": "string",
              "metadata": {
                "description": "Log Analytics workspace name"
              }
            },
            "appInsightsName": {
              "type": "string",
              "metadata": {
                "description": "Application Insights name"
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Resource tags"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.OperationalInsights/workspaces",
              "apiVersion": "2022-10-01",
              "name": "[parameters('logAnalyticsName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "sku": {
                  "name": "PerGB2018"
                },
                "retentionInDays": "[if(equals(parameters('environment'), 'prod'), 90, 30)]",
                "features": {
                  "enableLogAccessUsingOnlyResourcePermissions": true
                }
              }
            },
            {
              "type": "Microsoft.Insights/components",
              "apiVersion": "2020-02-02",
              "name": "[parameters('appInsightsName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "kind": "web",
              "properties": {
                "Application_Type": "web",
                "WorkspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsName'))]",
                "IngestionMode": "LogAnalytics",
                "publicNetworkAccessForIngestion": "Enabled",
                "publicNetworkAccessForQuery": "Enabled"
              },
              "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsName'))]"
              ]
            }
          ],
          "outputs": {
            "logAnalyticsWorkspaceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsName'))]"
            },
            "logAnalyticsCustomerId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsName')), '2022-10-01').customerId]"
            },
            "appInsightsId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Insights/components', parameters('appInsightsName'))]"
            },
            "appInsightsInstrumentationKey": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Insights/components', parameters('appInsightsName')), '2020-02-02').InstrumentationKey]"
            },
            "appInsightsConnectionString": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Insights/components', parameters('appInsightsName')), '2020-02-02').ConnectionString]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2025-04-01",
      "name": "[format('{0}-storage-deployment', variables('namingPrefix'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "environment": {
            "value": "[parameters('environment')]"
          },
          "storageAccountName": {
            "value": "[format('ss{0}{1}', parameters('environment'), variables('uniqueSuffix'))]"
          },
          "enableStaticWebsite": {
            "value": true
          },
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.38.33.27573",
              "templateHash": "11861337793301984530"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "metadata": {
                "description": "Azure region"
              }
            },
            "environment": {
              "type": "string",
              "metadata": {
                "description": "Environment name"
              }
            },
            "storageAccountName": {
              "type": "string",
              "metadata": {
                "description": "Storage account name (must be globally unique, 3-24 chars, lowercase alphanumeric)"
              }
            },
            "enableStaticWebsite": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Enable static website hosting"
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Resource tags"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2023-01-01",
              "name": "[parameters('storageAccountName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": {
                "name": "[if(equals(parameters('environment'), 'prod'), 'Standard_GRS', 'Standard_LRS')]"
              },
              "kind": "StorageV2",
              "properties": {
                "accessTier": "Hot",
                "allowBlobPublicAccess": true,
                "minimumTlsVersion": "TLS1_2",
                "supportsHttpsTrafficOnly": true,
                "encryption": {
                  "services": {
                    "blob": {
                      "enabled": true
                    },
                    "file": {
                      "enabled": true
                    }
                  },
                  "keySource": "Microsoft.Storage"
                }
              }
            },
            {
              "condition": "[parameters('enableStaticWebsite')]",
              "type": "Microsoft.Storage/storageAccounts/blobServices",
              "apiVersion": "2023-01-01",
              "name": "[format('{0}/{1}', parameters('storageAccountName'), 'default')]",
              "properties": {
                "cors": {
                  "corsRules": [
                    {
                      "allowedOrigins": [
                        "*"
                      ],
                      "allowedMethods": [
                        "GET",
                        "HEAD",
                        "OPTIONS"
                      ],
                      "maxAgeInSeconds": 3600,
                      "exposedHeaders": [
                        "*"
                      ],
                      "allowedHeaders": [
                        "*"
                      ]
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
              ]
            },
            {
              "condition": "[parameters('enableStaticWebsite')]",
              "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
              "apiVersion": "2023-01-01",
              "name": "[format('{0}/{1}/{2}', parameters('storageAccountName'), 'default', '$web')]",
              "properties": {
                "publicAccess": "Blob"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', parameters('storageAccountName'), 'default')]"
              ]
            }
          ],
          "outputs": {
            "storageAccountId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
            },
            "storageAccountName": {
              "type": "string",
              "value": "[parameters('storageAccountName')]"
            },
            "primaryEndpoints": {
              "type": "object",
              "value": "[reference(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2023-01-01').primaryEndpoints]"
            },
            "staticWebsiteUrl": {
              "type": "string",
              "value": "[if(parameters('enableStaticWebsite'), reference(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2023-01-01').primaryEndpoints.web, '')]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2025-04-01",
      "name": "[format('{0}-swa-deployment', variables('namingPrefix'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "staticWebAppName": {
            "value": "[format('{0}-frontend', variables('namingPrefix'))]"
          },
          "skuName": "[if(equals(parameters('environment'), 'prod'), createObject('value', 'Standard'), createObject('value', 'Free'))]",
          "repositoryUrl": {
            "value": ""
          },
          "branch": {
            "value": "main"
          },
          "appInsightsConnectionString": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-monitoring-deployment', variables('namingPrefix'))), '2025-04-01').outputs.appInsightsConnectionString.value]"
          },
          "appLocation": {
            "value": "/src/frontend/admin"
          },
          "apiLocation": {
            "value": ""
          },
          "outputLocation": {
            "value": "dist"
          },
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.38.33.27573",
              "templateHash": "13187260015997398455"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "metadata": {
                "description": "Azure region"
              }
            },
            "staticWebAppName": {
              "type": "string",
              "metadata": {
                "description": "Static Web App name"
              }
            },
            "skuName": {
              "type": "string",
              "defaultValue": "Free",
              "allowedValues": [
                "Free",
                "Standard"
              ],
              "metadata": {
                "description": "SKU name (Free or Standard)"
              }
            },
            "repositoryUrl": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "GitHub repository URL (optional, for GitHub Actions integration)"
              }
            },
            "branch": {
              "type": "string",
              "defaultValue": "main",
              "metadata": {
                "description": "GitHub branch to deploy from"
              }
            },
            "appInsightsConnectionString": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Application Insights connection string"
              }
            },
            "appLocation": {
              "type": "string",
              "defaultValue": "/src/frontend/admin",
              "metadata": {
                "description": "App location in repository"
              }
            },
            "apiLocation": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "API location in repository (if applicable)"
              }
            },
            "outputLocation": {
              "type": "string",
              "defaultValue": "dist",
              "metadata": {
                "description": "Output location (build artifacts)"
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Resource tags"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Web/staticSites",
              "apiVersion": "2023-01-01",
              "name": "[parameters('staticWebAppName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": {
                "name": "[parameters('skuName')]",
                "tier": "[parameters('skuName')]"
              },
              "properties": {
                "repositoryUrl": "[parameters('repositoryUrl')]",
                "branch": "[parameters('branch')]",
                "buildProperties": {
                  "appLocation": "[parameters('appLocation')]",
                  "apiLocation": "[parameters('apiLocation')]",
                  "outputLocation": "[parameters('outputLocation')]"
                },
                "provider": "GitHub",
                "stagingEnvironmentPolicy": "Enabled",
                "allowConfigFileUpdates": true
              }
            },
            {
              "type": "Microsoft.Web/staticSites/config",
              "apiVersion": "2023-01-01",
              "name": "[format('{0}/{1}', parameters('staticWebAppName'), 'appsettings')]",
              "properties": {
                "VITE_APPLICATIONINSIGHTS_CONNECTION_STRING": "[parameters('appInsightsConnectionString')]",
                "VITE_APP_URL": "[format('https://{0}', reference(resourceId('Microsoft.Web/staticSites', parameters('staticWebAppName')), '2023-01-01').defaultHostname)]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/staticSites', parameters('staticWebAppName'))]"
              ]
            }
          ],
          "outputs": {
            "staticWebAppId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Web/staticSites', parameters('staticWebAppName'))]"
            },
            "staticWebAppName": {
              "type": "string",
              "value": "[parameters('staticWebAppName')]"
            },
            "defaultHostname": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Web/staticSites', parameters('staticWebAppName')), '2023-01-01').defaultHostname]"
            },
            "staticWebAppUrl": {
              "type": "string",
              "value": "[format('https://{0}', reference(resourceId('Microsoft.Web/staticSites', parameters('staticWebAppName')), '2023-01-01').defaultHostname)]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('{0}-monitoring-deployment', variables('namingPrefix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2025-04-01",
      "name": "[format('{0}-acr-deployment', variables('namingPrefix'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "environment": {
            "value": "[parameters('environment')]"
          },
          "registryName": {
            "value": "[format('sunnyseat{0}{1}', parameters('environment'), variables('uniqueSuffix'))]"
          },
          "skuName": "[if(equals(parameters('environment'), 'prod'), createObject('value', 'Standard'), createObject('value', 'Basic'))]",
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.38.33.27573",
              "templateHash": "2984674709933951121"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "metadata": {
                "description": "Azure region"
              }
            },
            "environment": {
              "type": "string",
              "metadata": {
                "description": "Environment name"
              }
            },
            "registryName": {
              "type": "string",
              "metadata": {
                "description": "Container registry name (must be globally unique, 5-50 chars, alphanumeric)"
              }
            },
            "skuName": {
              "type": "string",
              "defaultValue": "Basic",
              "metadata": {
                "description": "SKU name (Basic, Standard, Premium)"
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Resource tags"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.ContainerRegistry/registries",
              "apiVersion": "2023-07-01",
              "name": "[parameters('registryName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": {
                "name": "[parameters('skuName')]"
              },
              "properties": {
                "adminUserEnabled": true,
                "publicNetworkAccess": "Enabled",
                "zoneRedundancy": "[if(equals(parameters('skuName'), 'Premium'), 'Enabled', 'Disabled')]"
              }
            }
          ],
          "outputs": {
            "registryId": {
              "type": "string",
              "value": "[resourceId('Microsoft.ContainerRegistry/registries', parameters('registryName'))]"
            },
            "loginServer": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.ContainerRegistry/registries', parameters('registryName')), '2023-07-01').loginServer]"
            },
            "registryName": {
              "type": "string",
              "value": "[parameters('registryName')]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2025-04-01",
      "name": "[format('{0}-caenv-deployment', variables('namingPrefix'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "environment": {
            "value": "[parameters('environment')]"
          },
          "environmentName": {
            "value": "[format('{0}-caenv', variables('namingPrefix'))]"
          },
          "logAnalyticsWorkspaceId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-monitoring-deployment', variables('namingPrefix'))), '2025-04-01').outputs.logAnalyticsWorkspaceId.value]"
          },
          "subnetId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-vnet-deployment', variables('namingPrefix'))), '2025-04-01').outputs.containerAppsSubnetId.value]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.38.33.27573",
              "templateHash": "17244870759797456487"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "metadata": {
                "description": "Azure region"
              }
            },
            "environment": {
              "type": "string",
              "metadata": {
                "description": "Environment name"
              }
            },
            "environmentName": {
              "type": "string",
              "metadata": {
                "description": "Container Apps Environment name"
              }
            },
            "logAnalyticsWorkspaceId": {
              "type": "string",
              "metadata": {
                "description": "Log Analytics workspace ID"
              }
            },
            "subnetId": {
              "type": "string",
              "metadata": {
                "description": "Subnet ID for Container Apps"
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Resource tags"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.App/managedEnvironments",
              "apiVersion": "2023-05-01",
              "name": "[parameters('environmentName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "appLogsConfiguration": {
                  "destination": "log-analytics",
                  "logAnalyticsConfiguration": {
                    "customerId": "[reference(resourceId('Microsoft.OperationalInsights/workspaces', split(parameters('logAnalyticsWorkspaceId'), '/')[8]), '2022-10-01').customerId]",
                    "sharedKey": "[listKeys(resourceId('Microsoft.OperationalInsights/workspaces', split(parameters('logAnalyticsWorkspaceId'), '/')[8]), '2022-10-01').primarySharedKey]"
                  }
                },
                "vnetConfiguration": {
                  "infrastructureSubnetId": "[parameters('subnetId')]",
                  "internal": false
                },
                "zoneRedundant": "[equals(parameters('environment'), 'prod')]"
              }
            }
          ],
          "outputs": {
            "environmentId": {
              "type": "string",
              "value": "[resourceId('Microsoft.App/managedEnvironments', parameters('environmentName'))]"
            },
            "environmentName": {
              "type": "string",
              "value": "[parameters('environmentName')]"
            },
            "defaultDomain": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.App/managedEnvironments', parameters('environmentName')), '2023-05-01').defaultDomain]"
            },
            "staticIp": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.App/managedEnvironments', parameters('environmentName')), '2023-05-01').staticIp]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('{0}-monitoring-deployment', variables('namingPrefix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('{0}-vnet-deployment', variables('namingPrefix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2025-04-01",
      "name": "[format('{0}-api-deployment', variables('namingPrefix'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "environment": {
            "value": "[parameters('environment')]"
          },
          "containerAppName": {
            "value": "[format('{0}-api', variables('namingPrefix'))]"
          },
          "containerAppsEnvironmentId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-caenv-deployment', variables('namingPrefix'))), '2025-04-01').outputs.environmentId.value]"
          },
          "containerImage": {
            "value": "[format('{0}/sunnyseat-api:latest', reference(resourceId('Microsoft.Resources/deployments', format('{0}-acr-deployment', variables('namingPrefix'))), '2025-04-01').outputs.loginServer.value)]"
          },
          "containerRegistryServer": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-acr-deployment', variables('namingPrefix'))), '2025-04-01').outputs.loginServer.value]"
          },
          "keyVaultName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-kv-deployment', variables('namingPrefix'))), '2025-04-01').outputs.keyVaultName.value]"
          },
          "appInsightsConnectionString": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-monitoring-deployment', variables('namingPrefix'))), '2025-04-01').outputs.appInsightsConnectionString.value]"
          },
          "databaseConnectionString": {
            "value": "[format('Host={0};Database={1};Username={2};Password={3};SSL Mode=Require', reference(resourceId('Microsoft.Resources/deployments', format('{0}-db-deployment', variables('namingPrefix'))), '2025-04-01').outputs.fullyQualifiedDomainName.value, reference(resourceId('Microsoft.Resources/deployments', format('{0}-db-deployment', variables('namingPrefix'))), '2025-04-01').outputs.databaseName.value, parameters('postgresAdminUsername'), parameters('postgresAdminPassword'))]"
          },
          "redisConnectionString": {
            "value": "[format('{0}:{1},password={2},ssl=True,abortConnect=False', reference(resourceId('Microsoft.Resources/deployments', format('{0}-redis-deployment', variables('namingPrefix'))), '2025-04-01').outputs.hostName.value, reference(resourceId('Microsoft.Resources/deployments', format('{0}-redis-deployment', variables('namingPrefix'))), '2025-04-01').outputs.sslPort.value, reference(resourceId('Microsoft.Resources/deployments', format('{0}-redis-deployment', variables('namingPrefix'))), '2025-04-01').outputs.primaryKey.value)]"
          },
          "jwtSecretKey": {
            "value": "[parameters('jwtSecretKey')]"
          },
          "openWeatherMapApiKey": {
            "value": "[parameters('openWeatherMapApiKey')]"
          },
          "corsAllowedOrigins": {
            "value": "[parameters('corsAllowedOrigins')]"
          },
          "minReplicas": "[if(equals(parameters('environment'), 'prod'), createObject('value', 2), createObject('value', 1))]",
          "maxReplicas": "[if(equals(parameters('environment'), 'prod'), createObject('value', 10), createObject('value', 3))]",
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.38.33.27573",
              "templateHash": "7663669686761328863"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "metadata": {
                "description": "Azure region"
              }
            },
            "environment": {
              "type": "string",
              "metadata": {
                "description": "Environment name"
              }
            },
            "containerAppName": {
              "type": "string",
              "metadata": {
                "description": "Container App name"
              }
            },
            "containerAppsEnvironmentId": {
              "type": "string",
              "metadata": {
                "description": "Container Apps Environment ID"
              }
            },
            "containerImage": {
              "type": "string",
              "metadata": {
                "description": "Container image (e.g., myregistry.azurecr.io/app:tag)"
              }
            },
            "containerRegistryServer": {
              "type": "string",
              "metadata": {
                "description": "Container registry server"
              }
            },
            "keyVaultName": {
              "type": "string",
              "metadata": {
                "description": "Key Vault name for secrets"
              }
            },
            "appInsightsConnectionString": {
              "type": "string",
              "metadata": {
                "description": "Application Insights connection string"
              }
            },
            "databaseConnectionString": {
              "type": "securestring",
              "metadata": {
                "description": "Database connection string"
              }
            },
            "redisConnectionString": {
              "type": "securestring",
              "metadata": {
                "description": "Redis connection string"
              }
            },
            "jwtSecretKey": {
              "type": "securestring",
              "metadata": {
                "description": "JWT secret key"
              }
            },
            "openWeatherMapApiKey": {
              "type": "securestring",
              "defaultValue": "",
              "metadata": {
                "description": "OpenWeatherMap API key"
              }
            },
            "corsAllowedOrigins": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "CORS allowed origins"
              }
            },
            "minReplicas": {
              "type": "int",
              "defaultValue": 1,
              "metadata": {
                "description": "Minimum replicas"
              }
            },
            "maxReplicas": {
              "type": "int",
              "defaultValue": 3,
              "metadata": {
                "description": "Maximum replicas"
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Resource tags"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.App/containerApps",
              "apiVersion": "2023-05-01",
              "name": "[parameters('containerAppName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "managedEnvironmentId": "[parameters('containerAppsEnvironmentId')]",
                "configuration": {
                  "activeRevisionsMode": "Single",
                  "ingress": {
                    "external": true,
                    "targetPort": 8080,
                    "transport": "http",
                    "allowInsecure": false,
                    "corsPolicy": {
                      "allowedOrigins": "[parameters('corsAllowedOrigins')]",
                      "allowedMethods": [
                        "GET",
                        "POST",
                        "PUT",
                        "DELETE",
                        "OPTIONS",
                        "PATCH"
                      ],
                      "allowedHeaders": [
                        "*"
                      ],
                      "allowCredentials": true
                    }
                  },
                  "registries": [
                    {
                      "server": "[parameters('containerRegistryServer')]",
                      "identity": "system"
                    }
                  ],
                  "secrets": [
                    {
                      "name": "db-connection-string",
                      "value": "[parameters('databaseConnectionString')]"
                    },
                    {
                      "name": "redis-connection-string",
                      "value": "[parameters('redisConnectionString')]"
                    },
                    {
                      "name": "jwt-secret-key",
                      "value": "[parameters('jwtSecretKey')]"
                    },
                    {
                      "name": "openweathermap-api-key",
                      "value": "[parameters('openWeatherMapApiKey')]"
                    },
                    {
                      "name": "appinsights-connection-string",
                      "value": "[parameters('appInsightsConnectionString')]"
                    }
                  ]
                },
                "template": {
                  "containers": [
                    {
                      "name": "[parameters('containerAppName')]",
                      "image": "[parameters('containerImage')]",
                      "resources": {
                        "cpu": "[json('0.5')]",
                        "memory": "1Gi"
                      },
                      "env": [
                        {
                          "name": "ASPNETCORE_ENVIRONMENT",
                          "value": "[if(equals(parameters('environment'), 'prod'), 'Production', 'Development')]"
                        },
                        {
                          "name": "ConnectionStrings__DefaultConnection",
                          "secretRef": "db-connection-string"
                        },
                        {
                          "name": "ConnectionStrings__Redis",
                          "secretRef": "redis-connection-string"
                        },
                        {
                          "name": "Jwt__SecretKey",
                          "secretRef": "jwt-secret-key"
                        },
                        {
                          "name": "Weather__OpenWeatherMapApiKey",
                          "secretRef": "openweathermap-api-key"
                        },
                        {
                          "name": "APPLICATIONINSIGHTS_CONNECTION_STRING",
                          "secretRef": "appinsights-connection-string"
                        },
                        {
                          "name": "Jwt__Issuer",
                          "value": "SunnySeat.Api"
                        },
                        {
                          "name": "Jwt__Audience",
                          "value": "SunnySeat.Admin"
                        },
                        {
                          "name": "Jwt__ExpirationMinutes",
                          "value": "480"
                        }
                      ]
                    }
                  ],
                  "scale": {
                    "minReplicas": "[parameters('minReplicas')]",
                    "maxReplicas": "[parameters('maxReplicas')]",
                    "rules": [
                      {
                        "name": "http-scaling",
                        "http": {
                          "metadata": {
                            "concurrentRequests": "100"
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          ],
          "outputs": {
            "containerAppId": {
              "type": "string",
              "value": "[resourceId('Microsoft.App/containerApps', parameters('containerAppName'))]"
            },
            "fqdn": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.App/containerApps', parameters('containerAppName')), '2023-05-01').configuration.ingress.fqdn]"
            },
            "principalId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.App/containerApps', parameters('containerAppName')), '2023-05-01', 'full').identity.principalId]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('{0}-caenv-deployment', variables('namingPrefix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('{0}-acr-deployment', variables('namingPrefix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('{0}-db-deployment', variables('namingPrefix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('{0}-kv-deployment', variables('namingPrefix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('{0}-monitoring-deployment', variables('namingPrefix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('{0}-redis-deployment', variables('namingPrefix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2025-04-01",
      "name": "[format('{0}-secrets-deployment', variables('namingPrefix'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "keyVaultName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-kv-deployment', variables('namingPrefix'))), '2025-04-01').outputs.keyVaultName.value]"
          },
          "secrets": {
            "value": [
              {
                "name": "ConnectionStrings--DefaultConnection",
                "value": "[format('Host={0};Database={1};Username={2};Password={3};SSL Mode=Require', reference(resourceId('Microsoft.Resources/deployments', format('{0}-db-deployment', variables('namingPrefix'))), '2025-04-01').outputs.fullyQualifiedDomainName.value, reference(resourceId('Microsoft.Resources/deployments', format('{0}-db-deployment', variables('namingPrefix'))), '2025-04-01').outputs.databaseName.value, parameters('postgresAdminUsername'), parameters('postgresAdminPassword'))]"
              },
              {
                "name": "ConnectionStrings--Redis",
                "value": "[format('{0}:{1},password={2},ssl=True,abortConnect=False', reference(resourceId('Microsoft.Resources/deployments', format('{0}-redis-deployment', variables('namingPrefix'))), '2025-04-01').outputs.hostName.value, reference(resourceId('Microsoft.Resources/deployments', format('{0}-redis-deployment', variables('namingPrefix'))), '2025-04-01').outputs.sslPort.value, reference(resourceId('Microsoft.Resources/deployments', format('{0}-redis-deployment', variables('namingPrefix'))), '2025-04-01').outputs.primaryKey.value)]"
              },
              {
                "name": "JwtOptions--SecretKey",
                "value": "[parameters('jwtSecretKey')]"
              },
              {
                "name": "WeatherApi--OpenWeatherMap--ApiKey",
                "value": "[parameters('openWeatherMapApiKey')]"
              },
              {
                "name": "MapTiler--ApiKey",
                "value": "[parameters('mapTilerApiKey')]"
              }
            ]
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.38.33.27573",
              "templateHash": "5315530214526537012"
            }
          },
          "parameters": {
            "keyVaultName": {
              "type": "string",
              "metadata": {
                "description": "Key Vault name"
              }
            },
            "secrets": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Array of secrets to store"
              }
            }
          },
          "resources": [
            {
              "copy": {
                "name": "secret",
                "count": "[length(parameters('secrets'))]",
                "mode": "serial",
                "batchSize": 1
              },
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2023-07-01",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('secrets')[copyIndex()].name)]",
              "properties": {
                "value": "[parameters('secrets')[copyIndex()].value]"
              }
            }
          ],
          "outputs": {
            "secretNames": {
              "type": "array",
              "copy": {
                "count": "[length(range(0, length(parameters('secrets'))))]",
                "input": "[parameters('secrets')[range(0, length(parameters('secrets')))[copyIndex()]].name]"
              }
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('{0}-db-deployment', variables('namingPrefix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('{0}-kv-deployment', variables('namingPrefix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('{0}-redis-deployment', variables('namingPrefix')))]"
      ]
    }
  ],
  "outputs": {
    "apiUrl": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-api-deployment', variables('namingPrefix'))), '2025-04-01').outputs.fqdn.value]"
    },
    "frontendUrl": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-swa-deployment', variables('namingPrefix'))), '2025-04-01').outputs.staticWebAppUrl.value]"
    },
    "staticWebAppName": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-swa-deployment', variables('namingPrefix'))), '2025-04-01').outputs.staticWebAppName.value]"
    },
    "databaseHost": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-db-deployment', variables('namingPrefix'))), '2025-04-01').outputs.fullyQualifiedDomainName.value]"
    },
    "databaseName": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-db-deployment', variables('namingPrefix'))), '2025-04-01').outputs.databaseName.value]"
    },
    "redisHost": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-redis-deployment', variables('namingPrefix'))), '2025-04-01').outputs.hostName.value]"
    },
    "keyVaultUri": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-kv-deployment', variables('namingPrefix'))), '2025-04-01').outputs.vaultUri.value]"
    },
    "keyVaultName": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-kv-deployment', variables('namingPrefix'))), '2025-04-01').outputs.keyVaultName.value]"
    },
    "storageWebsiteUrl": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-storage-deployment', variables('namingPrefix'))), '2025-04-01').outputs.staticWebsiteUrl.value]"
    },
    "containerRegistryLoginServer": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-acr-deployment', variables('namingPrefix'))), '2025-04-01').outputs.loginServer.value]"
    },
    "appInsightsInstrumentationKey": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-monitoring-deployment', variables('namingPrefix'))), '2025-04-01').outputs.appInsightsInstrumentationKey.value]"
    },
    "appInsightsConnectionString": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-monitoring-deployment', variables('namingPrefix'))), '2025-04-01').outputs.appInsightsConnectionString.value]"
    },
    "resourceGroupName": {
      "type": "string",
      "value": "[resourceGroup().name]"
    }
  }
}