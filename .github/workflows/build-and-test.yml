name: Build and Test

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  DOTNET_VERSION: "8.0.x"

jobs:
  test:
    name: Build and Test
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgis/postgis:15-3.4
        env:
          POSTGRES_DB: sunnyseat_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: dotnet restore SunnySeat.sln

      - name: Build solution
        run: dotnet build SunnySeat.sln --no-restore --configuration Release

      - name: Initialize test database
        run: |
          # Wait for PostgreSQL to be ready
          timeout 60 bash -c 'until pg_isready -h localhost -p 5432 -U postgres; do sleep 1; done'

          # Create PostGIS extensions
          PGPASSWORD=postgres psql -h localhost -p 5432 -U postgres -d sunnyseat_test -c "CREATE EXTENSION IF NOT EXISTS postgis;"
          PGPASSWORD=postgres psql -h localhost -p 5432 -U postgres -d sunnyseat_test -c "CREATE EXTENSION IF NOT EXISTS postgis_topology;"

          # Verify PostGIS installation
          PGPASSWORD=postgres psql -h localhost -p 5432 -U postgres -d sunnyseat_test -c "SELECT PostGIS_Version();"

      - name: Run database migrations
        run: |
          dotnet tool install --global dotnet-ef
          dotnet ef database update --project src/backend/SunnySeat.Data --startup-project src/backend/SunnySeat.Api --connection "Host=localhost;Database=sunnyseat_test;Username=postgres;Password=postgres"
        env:
          ASPNETCORE_ENVIRONMENT: Testing

      - name: Run unit tests
        run: dotnet test --no-build --configuration Release --verbosity normal --logger trx --results-directory TestResults/ --collect:"XPlat Code Coverage" --settings coverlet.runsettings --filter "Category!=E2E"
        env:
          ConnectionStrings__DefaultConnection: "Host=localhost;Database=sunnyseat_test;Username=postgres;Password=postgres"
          ASPNETCORE_ENVIRONMENT: Testing

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: TestResults/

      - name: Generate coverage report
        uses: danielpalme/ReportGenerator-GitHub-Action@5.3.11
        with:
          reports: "TestResults/**/coverage.cobertura.xml"
          targetdir: "coverage-report"
          reporttypes: "HtmlInline;Cobertura;MarkdownSummaryGithub"

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report
          path: coverage-report/

      - name: Add coverage comment to PR
        uses: marocchino/sticky-pull-request-comment@v2
        if: github.event_name == 'pull_request'
        with:
          recreate: true
          path: coverage-report/SummaryGithub.md

      - name: Check coverage threshold
        run: |
          # Extract line coverage percentage from Cobertura report
          coverage=$(grep -oP 'line-rate="\K[0-9.]+' coverage-report/Cobertura.xml | head -1)
          coverage_percent=$(echo "$coverage * 100" | bc)
          echo "Code coverage: $coverage_percent%"

          # Check if coverage meets 80% threshold
          threshold=80
          if (( $(echo "$coverage_percent < $threshold" | bc -l) )); then
            echo "⚠️ Code coverage ($coverage_percent%) is below threshold ($threshold%)"
            echo "::warning::Code coverage is below target of 80%"
          else
            echo "✅ Code coverage ($coverage_percent%) meets threshold ($threshold%)"
          fi

      - name: Run health check tests
        run: |
          # Start the API in background for integration testing
          dotnet run --project src/backend/SunnySeat.Api --urls "http://localhost:5001" &
          API_PID=$!

          # Wait for API to be ready
          timeout 30 bash -c 'until curl -f http://localhost:5001/health; do sleep 1; done'

          # Test health endpoint
          response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:5001/health)
          if [ "$response" -eq 200 ]; then
            echo "? Health check endpoint is working"
          else
            echo "? Health check endpoint failed with status: $response"
            exit 1
          fi

          # Clean up
          kill $API_PID || true
        env:
          ConnectionStrings__DefaultConnection: "Host=localhost;Database=sunnyseat_test;Username=postgres;Password=postgres"
          ASPNETCORE_ENVIRONMENT: Testing

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore SunnySeat.sln

      - name: Run security audit
        run: dotnet list package --vulnerable --include-transitive 2>&1 | tee security-audit.log

      - name: Check for vulnerabilities
        run: |
          if grep -q "has the following vulnerable packages" security-audit.log; then
            echo "? Security vulnerabilities found!"
            cat security-audit.log
            exit 1
          else
            echo "? No security vulnerabilities found"
          fi

      - name: Upload security audit results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-audit
          path: security-audit.log

  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore SunnySeat.sln

      - name: Build solution
        run: dotnet build SunnySeat.sln --no-restore --configuration Release

      - name: Install format tool
        run: dotnet tool install -g dotnet-format

      - name: Check code formatting
        run: dotnet format SunnySeat.sln --verify-no-changes --verbosity diagnostic

      - name: Run static analysis
        run: |
          # Run built-in .NET analyzers
          dotnet build SunnySeat.sln --configuration Release --verbosity normal | tee build-analysis.log

          # Check for analyzer warnings/errors
          if grep -E "(warning|error) (CA|IDE)" build-analysis.log; then
            echo "??  Code analysis warnings found"
            grep -E "(warning|error) (CA|IDE)" build-analysis.log
          else
            echo "? No code analysis issues found"
          fi

      - name: Upload analysis results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: code-analysis
          path: build-analysis.log
