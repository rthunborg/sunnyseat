// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SunnySeat.Data;

#nullable disable

namespace SunnySeat.Data.Migrations
{
    [DbContext(typeof(SunnySeatDbContext))]
    [Migration("20250924164301_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SunnySeat.Core.Entities.Building", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Polygon>("Geometry")
                        .IsRequired()
                        .HasColumnType("geography (polygon)");

                    b.Property<double>("Height")
                        .HasPrecision(6, 2)
                        .HasColumnType("double precision");

                    b.Property<double>("QualityScore")
                        .HasPrecision(3, 2)
                        .HasColumnType("double precision");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("ExternalId");

                    b.HasIndex("Geometry");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Geometry"), "gist");

                    b.HasIndex("Source");

                    b.ToTable("buildings", (string)null);
                });

            modelBuilder.Entity("SunnySeat.Core.Entities.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BinnedTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("ConfidenceAtPrediction")
                        .HasPrecision(3, 2)
                        .HasColumnType("double precision");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("PatioId")
                        .HasColumnType("integer");

                    b.Property<string>("PredictedState")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("UserTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("VenueId")
                        .HasColumnType("integer");

                    b.Property<bool>("WasSunny")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("BinnedTimestamp");

                    b.HasIndex("PatioId", "BinnedTimestamp");

                    b.HasIndex("VenueId", "UserTimestamp");

                    b.ToTable("feedback", (string)null);
                });

            modelBuilder.Entity("SunnySeat.Core.Entities.Patio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Polygon>("Geometry")
                        .IsRequired()
                        .HasColumnType("geography (polygon)");

                    b.Property<string>("HeightSource")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<double>("PolygonQuality")
                        .HasPrecision(3, 2)
                        .HasColumnType("double precision");

                    b.Property<bool>("ReviewNeeded")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("VenueId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Geometry");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Geometry"), "gist");

                    b.HasIndex("ReviewNeeded");

                    b.HasIndex("VenueId");

                    b.ToTable("patios", (string)null);
                });

            modelBuilder.Entity("SunnySeat.Core.Entities.SunWindow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CalculatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<double>("Confidence")
                        .HasPrecision(3, 2)
                        .HasColumnType("double precision");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PatioId")
                        .HasColumnType("integer");

                    b.Property<double>("PeakExposure")
                        .HasPrecision(3, 2)
                        .HasColumnType("double precision");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Date");

                    b.HasIndex("StartTime");

                    b.HasIndex("PatioId", "Date");

                    b.ToTable("sun_windows", (string)null);
                });

            modelBuilder.Entity("SunnySeat.Core.Entities.Venue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Point>("Location")
                        .IsRequired()
                        .HasColumnType("geography (point)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("IsActive");

                    b.HasIndex("Location");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Location"), "gist");

                    b.ToTable("venues", (string)null);
                });

            modelBuilder.Entity("SunnySeat.Core.Entities.WeatherSlice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("CloudCover")
                        .HasPrecision(5, 2)
                        .HasColumnType("double precision");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("IsForecast")
                        .HasColumnType("boolean");

                    b.Property<double>("PrecipitationProbability")
                        .HasPrecision(3, 2)
                        .HasColumnType("double precision");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<double>("Temperature")
                        .HasPrecision(4, 1)
                        .HasColumnType("double precision");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double?>("Visibility")
                        .HasPrecision(5, 2)
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("IsForecast");

                    b.HasIndex("Timestamp");

                    b.HasIndex("Source", "Timestamp");

                    b.ToTable("weather_slices", (string)null);
                });

            modelBuilder.Entity("SunnySeat.Core.Entities.Feedback", b =>
                {
                    b.HasOne("SunnySeat.Core.Entities.Patio", "Patio")
                        .WithMany("FeedbackEntries")
                        .HasForeignKey("PatioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SunnySeat.Core.Entities.Venue", "Venue")
                        .WithMany()
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patio");

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("SunnySeat.Core.Entities.Patio", b =>
                {
                    b.HasOne("SunnySeat.Core.Entities.Venue", "Venue")
                        .WithMany("Patios")
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("SunnySeat.Core.Entities.SunWindow", b =>
                {
                    b.HasOne("SunnySeat.Core.Entities.Patio", "Patio")
                        .WithMany("SunWindows")
                        .HasForeignKey("PatioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patio");
                });

            modelBuilder.Entity("SunnySeat.Core.Entities.Patio", b =>
                {
                    b.Navigation("FeedbackEntries");

                    b.Navigation("SunWindows");
                });

            modelBuilder.Entity("SunnySeat.Core.Entities.Venue", b =>
                {
                    b.Navigation("Patios");
                });
#pragma warning restore 612, 618
        }
    }
}
