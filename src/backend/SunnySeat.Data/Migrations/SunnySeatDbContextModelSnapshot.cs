// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SunnySeat.Data;

#nullable disable

namespace SunnySeat.Data.Migrations
{
    [DbContext(typeof(SunnySeatDbContext))]
    partial class SunnySeatDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SunnySeat.Core.Entities.AdminUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Claims")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("jsonb")
                        .HasDefaultValueSql("'[]'::jsonb");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("LastLoginAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("RefreshToken")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("RefreshTokenExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Role")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasDefaultValue("Admin");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_AdminUsers_CreatedAt");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("IX_AdminUsers_Email");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_AdminUsers_IsActive");

                    b.HasIndex("RefreshToken")
                        .HasDatabaseName("IX_AdminUsers_RefreshToken")
                        .HasFilter("\"RefreshToken\" IS NOT NULL");

                    b.HasIndex("Role")
                        .HasDatabaseName("IX_AdminUsers_Role");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasDatabaseName("IX_AdminUsers_Username");

                    b.ToTable("admin_users", (string)null);
                });

            modelBuilder.Entity("SunnySeat.Core.Entities.Building", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double?>("AdminHeightOverride")
                        .HasColumnType("double precision");

                    b.Property<string>("BuildingType")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Polygon>("Geometry")
                        .IsRequired()
                        .HasColumnType("geography (polygon)");

                    b.Property<double>("Height")
                        .HasPrecision(6, 2)
                        .HasColumnType("double precision");

                    b.Property<double?>("HeightM")
                        .HasColumnType("double precision");

                    b.Property<int>("HeightSource")
                        .HasColumnType("integer");

                    b.Property<double>("QualityScore")
                        .HasPrecision(4, 3)
                        .HasColumnType("double precision");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Buildings_CreatedAt");

                    b.HasIndex("Geometry")
                        .HasDatabaseName("IX_Buildings_Geometry_Spatial");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Geometry"), "gist");

                    b.HasIndex("Source")
                        .HasDatabaseName("IX_Buildings_Source");

                    b.HasIndex("ExternalId", "Source")
                        .HasDatabaseName("IX_Buildings_ExternalId_Source")
                        .HasFilter("\"ExternalId\" IS NOT NULL");

                    b.ToTable("buildings", (string)null);
                });

            modelBuilder.Entity("SunnySeat.Core.Entities.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BinnedTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("ConfidenceAtPrediction")
                        .HasPrecision(3, 2)
                        .HasColumnType("double precision");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PatioId")
                        .HasColumnType("integer");

                    b.Property<string>("PredictedState")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("UserTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("VenueId")
                        .HasColumnType("integer");

                    b.Property<bool>("WasSunny")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("BinnedTimestamp");

                    b.HasIndex("PatioId", "BinnedTimestamp");

                    b.HasIndex("VenueId", "UserTimestamp");

                    b.ToTable("feedback", (string)null);
                });

            modelBuilder.Entity("SunnySeat.Core.Entities.Patio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Polygon>("Geometry")
                        .IsRequired()
                        .HasColumnType("geography (polygon)");

                    b.Property<double?>("HeightM")
                        .HasPrecision(5, 2)
                        .HasColumnType("double precision");

                    b.Property<int>("HeightSource")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Orientation")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<double>("PolygonQuality")
                        .HasPrecision(3, 2)
                        .HasColumnType("double precision");

                    b.Property<bool>("ReviewNeeded")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("VenueId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Geometry");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Geometry"), "gist");

                    b.HasIndex("HeightSource");

                    b.HasIndex("PolygonQuality");

                    b.HasIndex("ReviewNeeded");

                    b.HasIndex("VenueId");

                    b.ToTable("patios", (string)null);
                });

            modelBuilder.Entity("SunnySeat.Core.Entities.PrecomputationSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("text");

                    b.Property<string>("JobId")
                        .HasColumnType("text");

                    b.Property<string>("Metrics")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PatiosProcessed")
                        .HasColumnType("integer");

                    b.Property<int>("PatiosTotal")
                        .HasColumnType("integer");

                    b.Property<int>("RetryCount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ScheduledAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("TargetDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Status");

                    b.HasIndex("TargetDate")
                        .IsUnique();

                    b.HasIndex("Status", "TargetDate");

                    b.ToTable("precomputation_schedules", (string)null);
                });

            modelBuilder.Entity("SunnySeat.Core.Entities.PrecomputedSunExposure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AffectingBuildingsCount")
                        .HasColumnType("integer");

                    b.Property<TimeSpan>("CalculationDuration")
                        .HasColumnType("interval");

                    b.Property<byte[]>("CompressedSunlitGeometry")
                        .HasColumnType("bytea");

                    b.Property<string>("ComputationVersion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ComputedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("Confidence")
                        .HasColumnType("double precision");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsStale")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LocalTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PatioId")
                        .HasColumnType("integer");

                    b.Property<double>("ShadedAreaSqM")
                        .HasColumnType("double precision");

                    b.Property<double>("SolarAzimuth")
                        .HasColumnType("double precision");

                    b.Property<double>("SolarElevation")
                        .HasColumnType("double precision");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<double>("SunExposurePercent")
                        .HasColumnType("double precision");

                    b.Property<double>("SunlitAreaSqM")
                        .HasColumnType("double precision");

                    b.Property<TimeOnly>("Time")
                        .HasColumnType("time without time zone");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Date");

                    b.HasIndex("ExpiresAt");

                    b.HasIndex("IsStale");

                    b.HasIndex("Date", "PatioId");

                    b.HasIndex("PatioId", "Date", "Time");

                    b.ToTable("precomputed_sun_exposure", (string)null);
                });

            modelBuilder.Entity("SunnySeat.Core.Entities.ProcessedWeather", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Condition")
                        .HasColumnType("integer");

                    b.Property<double>("ConfidenceLevel")
                        .HasPrecision(3, 2)
                        .HasColumnType("double precision");

                    b.Property<bool>("IsSunBlocking")
                        .HasColumnType("boolean");

                    b.Property<Point>("Location")
                        .HasColumnType("geography (point)");

                    b.Property<double>("NormalizedCloudCover")
                        .HasPrecision(5, 2)
                        .HasColumnType("double precision");

                    b.Property<double>("PrecipitationIntensity")
                        .HasPrecision(5, 2)
                        .HasColumnType("double precision");

                    b.Property<DateTime>("ProcessedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("WeatherSliceId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Location");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Location"), "gist");

                    b.HasIndex("ProcessedAt");

                    b.HasIndex("Timestamp");

                    b.HasIndex("WeatherSliceId");

                    b.HasIndex("Timestamp", "IsSunBlocking");

                    b.ToTable("processed_weather", (string)null);
                });

            modelBuilder.Entity("SunnySeat.Core.Entities.SunWindow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("AverageExposurePercent")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("CalculatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<double>("Confidence")
                        .HasPrecision(3, 2)
                        .HasColumnType("double precision");

                    b.Property<int>("DataPointCount")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsRecommended")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LocalEndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LocalPeakExposureTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LocalStartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("MaxExposurePercent")
                        .HasColumnType("double precision");

                    b.Property<double>("MinExposurePercent")
                        .HasColumnType("double precision");

                    b.Property<int>("PatioId")
                        .HasColumnType("integer");

                    b.Property<double>("PeakExposure")
                        .HasPrecision(3, 2)
                        .HasColumnType("double precision");

                    b.Property<DateTime>("PeakExposureTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("PriorityScore")
                        .HasColumnType("double precision");

                    b.Property<int>("Quality")
                        .HasColumnType("integer");

                    b.Property<string>("RecommendationReason")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Date");

                    b.HasIndex("StartTime");

                    b.HasIndex("PatioId", "Date");

                    b.ToTable("sun_windows", (string)null);
                });

            modelBuilder.Entity("SunnySeat.Core.Entities.Venue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMapped")
                        .HasColumnType("boolean");

                    b.Property<Point>("Location")
                        .IsRequired()
                        .HasColumnType("geography (point)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Website")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.HasIndex("IsActive");

                    b.HasIndex("IsMapped");

                    b.HasIndex("Location");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Location"), "gist");

                    b.HasIndex("Name");

                    b.HasIndex("Type");

                    b.ToTable("venues", (string)null);
                });

            modelBuilder.Entity("SunnySeat.Core.Entities.VenueQualityMetrics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AssessedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<double>("AveragePatioQuality")
                        .HasPrecision(3, 2)
                        .HasColumnType("double precision");

                    b.Property<bool>("HasAccurateLocation")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasCompleteMetadata")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasQualityPatios")
                        .HasColumnType("boolean");

                    b.Property<double>("OverallQuality")
                        .HasPrecision(3, 2)
                        .HasColumnType("double precision");

                    b.Property<int>("PatioCount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("ValidationIssues")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("VenueId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AssessedAt");

                    b.HasIndex("OverallQuality");

                    b.HasIndex("VenueId");

                    b.ToTable("venue_quality_metrics", (string)null);
                });

            modelBuilder.Entity("SunnySeat.Core.Entities.WeatherSlice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("CloudCover")
                        .HasPrecision(5, 2)
                        .HasColumnType("double precision");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("IsForecast")
                        .HasColumnType("boolean");

                    b.Property<double>("PrecipitationProbability")
                        .HasPrecision(3, 2)
                        .HasColumnType("double precision");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<double>("Temperature")
                        .HasPrecision(4, 1)
                        .HasColumnType("double precision");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double?>("Visibility")
                        .HasPrecision(5, 2)
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("IsForecast");

                    b.HasIndex("Timestamp");

                    b.HasIndex("Source", "Timestamp");

                    b.ToTable("weather_slices", (string)null);
                });

            modelBuilder.Entity("SunnySeat.Core.Entities.Feedback", b =>
                {
                    b.HasOne("SunnySeat.Core.Entities.Patio", "Patio")
                        .WithMany("FeedbackEntries")
                        .HasForeignKey("PatioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SunnySeat.Core.Entities.Venue", "Venue")
                        .WithMany()
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patio");

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("SunnySeat.Core.Entities.Patio", b =>
                {
                    b.HasOne("SunnySeat.Core.Entities.Venue", "Venue")
                        .WithMany("Patios")
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("SunnySeat.Core.Entities.PrecomputedSunExposure", b =>
                {
                    b.HasOne("SunnySeat.Core.Entities.Patio", "Patio")
                        .WithMany()
                        .HasForeignKey("PatioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patio");
                });

            modelBuilder.Entity("SunnySeat.Core.Entities.ProcessedWeather", b =>
                {
                    b.HasOne("SunnySeat.Core.Entities.WeatherSlice", "WeatherSlice")
                        .WithMany()
                        .HasForeignKey("WeatherSliceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WeatherSlice");
                });

            modelBuilder.Entity("SunnySeat.Core.Entities.SunWindow", b =>
                {
                    b.HasOne("SunnySeat.Core.Entities.Patio", "Patio")
                        .WithMany("SunWindows")
                        .HasForeignKey("PatioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patio");
                });

            modelBuilder.Entity("SunnySeat.Core.Entities.VenueQualityMetrics", b =>
                {
                    b.HasOne("SunnySeat.Core.Entities.Venue", "Venue")
                        .WithMany()
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("SunnySeat.Core.Entities.Patio", b =>
                {
                    b.Navigation("FeedbackEntries");

                    b.Navigation("SunWindows");
                });

            modelBuilder.Entity("SunnySeat.Core.Entities.Venue", b =>
                {
                    b.Navigation("Patios");
                });
#pragma warning restore 612, 618
        }
    }
}
